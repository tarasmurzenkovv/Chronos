buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'org.springframework.boot:spring-boot-gradle-plugin:2.1.1.RELEASE'
        classpath 'com.moowork.gradle:gradle-node-plugin:1.2.0'
        classpath 'org.liquibase:liquibase-gradle-plugin:1.2.0'
        classpath 'mysql:mysql-connector-java:5.1.46'
        classpath 'org.postgresql:postgresql:42.2.5'
    }
}

plugins {
    id 'io.franzbecker.gradle-lombok' version '1.14'
    id "org.liquibase.gradle" version "2.0.1"
    id 'org.hidetake.ssh' version '2.9.0'
    id 'java'
}

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'checkstyle'
apply plugin: 'com.moowork.node'
apply plugin: 'liquibase'
apply plugin: "org.hidetake.ssh"

remotes {
    webServer {
        def pathToRsa = project.findProperty("host.id_rsa.file.path")
        host = project.findProperty("host")
        user = project.findProperty("host.user")
        password = project.findProperty("host.password")
        identity = pathToRsa == null ? null : file(pathToRsa)
    }
}

node {
    version = '10.14.2'
    npmVersion = '6.5.0'
    download = true
    workDir = file("${project.buildDir}/node")
    nodeModulesDir = file("${project.projectDir}/src/main/webapp/chronos-ui")
}

lombok {
    version = '1.18.4'
    sha256 = ""
}

bootJar {
    baseName = 'chronos'
    from('src/main/webapp/chronos-ui/build') {
        into 'public'
    }
}

checkstyle {
    toolVersion '8.14'
    configFile file("checkstyle/checkstyle.xml")
    configProperties = [
            'configDir': rootProject.file('checkstyle')
    ]
}

checkstyleMain {
    source = 'src/main/java'
}

task applyDbChanges() {
    def changeLog = "$projectDir/src/main/resources/db/changelog.xml"
    def dbUrl = project.findProperty("dbUrl")
    def dbUserName = project.findProperty("user_name")
    def dbPassword = project.findProperty("password")
    liquibase {
        activities {
            main {
                changeLogFile changeLog
                url dbUrl
                username dbUserName
                password dbPassword
            }
        }
    }
}

task deletFeArtifacts(type: Delete) {
    def pathToFeFolder = "${project.projectDir}/src/main/webapp/chronos-ui"
    def buildFolder = "${pathToFeFolder}/build"
    def nodeModules = "${pathToFeFolder}/node_modules"
    def dotEnvFile = "${pathToFeFolder}/.env.production"
    delete buildFolder, nodeModules, dotEnvFile
}

task createDotEnvFileFe(type: Copy) {
    def pathToFeFolder = "${project.projectDir}/src/main/webapp/chronos-ui"
    from pathToFeFolder
    into pathToFeFolder
    include '.env.production.example'
    rename '.env.production.example', '.env.production'
}

task installFeDependencies(type: NpmTask) {
    args = ['install']
    dependsOn createDotEnvFileFe
}

task buildFe(type: NpmTask) {
    args = ['run', 'build']
    dependsOn installFeDependencies
}

compileJava {
    dependsOn buildFe
}

clean {
    dependsOn deletFeArtifacts
}

task deploy {
    doLast {
        ssh.settings {
            knownHosts = allowAnyHosts
        }
        ssh.run {
            session(remotes.webServer) {
                executeSudo('systemctl stop ' + project.findProperty("serviceName"), pty: true)

                put from: "${project.projectDir}/build/libs/chronos.jar",
                        into: '/home/syngenta/deployed_applications/chronos_app'

                executeSudo('systemctl start ' + project.findProperty("serviceName"), pty: true)
            }
        }
    }
}

repositories {
    mavenCentral()
}

test {
    maxParallelForks = 1
}

sourceCompatibility = 1.11
targetCompatibility = 1.11

dependencies {
    compile 'org.springframework.boot:spring-boot-starter-web'
    compile 'org.springframework.boot:spring-boot-starter-data-jpa'
    compile 'org.springframework.boot:spring-boot-configuration-processor'
    compile 'org.postgresql:postgresql:42.2.5'
    compile 'org.javassist:javassist:3.23.1-GA'
    compile 'org.slf4j:slf4j-api:1.7.25'
    compile 'ch.qos.logback:logback-classic:1.2.3'
    compile 'ch.qos.logback:logback-core:1.2.3'
    compile 'io.jsonwebtoken:jjwt:0.9.1'
    compile 'javax.xml.bind:jaxb-api:2.3.1'
    compile 'mysql:mysql-connector-java:5.1.46'
    compile group: 'org.postgresql', name: 'postgresql', version: '42.2.5'
    compile 'org.apache.commons:commons-lang3:3.8.1'
    compile 'io.springfox:springfox-swagger2:2.0.1'
    compile 'io.springfox:springfox-swagger-ui:2.0.2'
    compile 'org.apache.poi:poi:4.0.1'
    compile 'org.apache.poi:poi-ooxml:4.0.1'
    compile group: 'org.apache.commons', name: 'commons-csv', version: '1.6'
    compile 'commons-io:commons-io:2.6'

    testCompile 'org.awaitility:awaitility:3.1.3'
    testCompile 'org.springframework.boot:spring-boot-starter-test'
    testCompile 'com.github.springtestdbunit:spring-test-dbunit:1.3.0'
    testCompile 'org.dbunit:dbunit:2.5.0'
    testCompile 'com.h2database:h2:1.4.197'
    testCompile 'com.jayway.restassured:rest-assured:2.9.0'
    testCompile 'org.junit.jupiter:junit-jupiter-engine:5.3.2'
    testCompile 'org.junit.jupiter:junit-jupiter-api:5.3.2'
    testCompile 'org.assertj:assertj-core:3.11.1'
}